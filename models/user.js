const mongoose=require('mongoose');
const bcrypt=require('bcrypt')
const saltRounds = 10;
const jwt=require('jsonwebtoken')
const moment = require("moment");
const userSchema=mongoose.Schema({
    name:{
        type:String,
        maxlength:50
    },
    email:{
        type:String,
        trim:true,
        unique:1
    },
    password:{
        type:String,
        minlength:6
        // message:'password must be minimum of 6 length'
    },
    lastname:{
        type:String,
        maxlength:50
    },
    token:{
        type:String
    },
    tokenExp:{
        type:Number
    }
})

userSchema.pre('save',function(next){//next is next of middle ware functions
    var user=this;//this is userSchema used to call pre function just line above
//you cant use arrow function where you use this keyword 

    if(user.isModified('password')){

        bcrypt.genSalt(saltRounds, function(err, salt) {
            if(err) return next(err);
            else{
            bcrypt.hash(user.password,salt, (err,hash)=>{
                if(err) return next(err);
                else{
                user.password=hash;
                next ();
                }
            })
        }
        })
    }else{
        next ();
    }
})

//comapring or matching password for login

userSchema.methods.comparePassword=function(plainPassword,cb){
    bcrypt.compare(plainPassword,this.password,function(err,isMatch){
        if(err)
        {
            return cb(err)
        }
        else
        {
            return cb(null,isMatch)
        }
    })
}

userSchema.methods.generateToken=function(cb){
    var user=this;
    //user._id this is auto generated by mongoatlas
    var token=jwt.sign(user._id.toHexString(),'secret')
    var oneHour = moment().add(1, 'hour').valueOf();

    user.token=token;
    user.tokenExp = oneHour;
    user.save(function(err,user){
        if(err) return cb(err)
        else return cb(null,user)
    })
    
}

const User=mongoose.model('user',userSchema);
module.exports= { User }